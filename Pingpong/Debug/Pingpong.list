
Pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d10  08003d10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08003d24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003d24  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cd1  00000000  00000000  0002ca00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026a74  00000000  00000000  0002f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000998f  00000000  00000000  00056264  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e884b  00000000  00000000  0005fbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014843e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000226c  00000000  00000000  001484bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ca8 	.word	0x08003ca8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ca8 	.word	0x08003ca8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0b8      	sub	sp, #224	; 0xe0
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004d2:	2244      	movs	r2, #68	; 0x44
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fbde 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2288      	movs	r2, #136	; 0x88
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fbd0 	bl	8003c98 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	2302      	movs	r3, #2
 80004fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2310      	movs	r3, #16
 8000508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000518:	2301      	movs	r3, #1
 800051a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800051e:	230a      	movs	r3, #10
 8000520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000524:	2307      	movs	r3, #7
 8000526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fc5e 	bl	8001dfc <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f834 	bl	80005b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2303      	movs	r3, #3
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056c:	2104      	movs	r1, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fff4 	bl	800255c <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800057a:	f000 f81a 	bl	80005b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800057e:	2302      	movs	r3, #2
 8000580:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000582:	2300      	movs	r3, #0
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4618      	mov	r0, r3
 800058a:	f002 f9eb 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000594:	f000 f80d 	bl	80005b2 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000598:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059c:	f001 fbd8 	bl	8001d50 <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005a6:	f000 f804 	bl	80005b2 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	37e0      	adds	r7, #224	; 0xe0
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b4d      	ldr	r3, [pc, #308]	; (800070c <MX_GPIO_Init+0x14c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a4c      	ldr	r2, [pc, #304]	; (800070c <MX_GPIO_Init+0x14c>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b4a      	ldr	r3, [pc, #296]	; (800070c <MX_GPIO_Init+0x14c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	4b47      	ldr	r3, [pc, #284]	; (800070c <MX_GPIO_Init+0x14c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a46      	ldr	r2, [pc, #280]	; (800070c <MX_GPIO_Init+0x14c>)
 80005f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b44      	ldr	r3, [pc, #272]	; (800070c <MX_GPIO_Init+0x14c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b41      	ldr	r3, [pc, #260]	; (800070c <MX_GPIO_Init+0x14c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a40      	ldr	r2, [pc, #256]	; (800070c <MX_GPIO_Init+0x14c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b3e      	ldr	r3, [pc, #248]	; (800070c <MX_GPIO_Init+0x14c>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <MX_GPIO_Init+0x14c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a3a      	ldr	r2, [pc, #232]	; (800070c <MX_GPIO_Init+0x14c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <MX_GPIO_Init+0x14c>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f001 fb60 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED7_Pin|LED8_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2160      	movs	r1, #96	; 0x60
 8000648:	4831      	ldr	r0, [pc, #196]	; (8000710 <MX_GPIO_Init+0x150>)
 800064a:	f001 fb5b 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f641 0106 	movw	r1, #6150	; 0x1806
 8000654:	482f      	ldr	r0, [pc, #188]	; (8000714 <MX_GPIO_Init+0x154>)
 8000656:	f001 fb55 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <MX_GPIO_Init+0x158>)
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4828      	ldr	r0, [pc, #160]	; (8000710 <MX_GPIO_Init+0x150>)
 8000670:	f001 f988 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED5_Pin|LED6_Pin;
 8000674:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f001 f978 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED7_Pin|LED8_Pin;
 8000694:	2360      	movs	r3, #96	; 0x60
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4819      	ldr	r0, [pc, #100]	; (8000710 <MX_GPIO_Init+0x150>)
 80006ac:	f001 f96a 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80006b0:	f641 0306 	movw	r3, #6150	; 0x1806
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_GPIO_Init+0x154>)
 80006ca:	f001 f95b 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_button_Pin;
 80006ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_button_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_GPIO_Init+0x154>)
 80006e4:	f001 f94e 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_button_Pin;
 80006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_button_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_GPIO_Init+0x150>)
 80006fe:	f001 f941 	bl	8001984 <HAL_GPIO_Init>

}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	48000800 	.word	0x48000800
 8000714:	48000400 	.word	0x48000400
 8000718:	10210000 	.word	0x10210000

0800071c <main>:
#include "clock.h"

#define RUN_TEST_PROGRAM

int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000720:	f000 ffb0 	bl	8001684 <HAL_Init>

  SystemClock_Config();
 8000724:	f7ff fed0 	bl	80004c8 <SystemClock_Config>

  MX_GPIO_Init();
 8000728:	f7ff ff4a 	bl	80005c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072c:	f000 ff0e 	bl	800154c <MX_USART2_UART_Init>

  #ifdef RUN_TEST_PROGRAM
  	  Test_program();
 8000730:	f000 fe4e 	bl	80013d0 <Test_program>
  #else
  	  Pingpong();
  #endif

  while (1)
 8000734:	e7fe      	b.n	8000734 <main+0x18>
	...

08000738 <L_hit>:
/**
@brief L_hit, check if L button is pressed
@param void
@return bool, true if L button pushed, false otherwise
 */
bool L_hit(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(L_button_GPIO_Port, L_button_Pin) == 0) return true;
 800073c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <L_hit+0x20>)
 8000742:	f001 fac7 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d101      	bne.n	8000750 <L_hit+0x18>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <L_hit+0x1a>
	else return false;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	48000400 	.word	0x48000400

0800075c <R_hit>:
/**
@brief L_hit, check if L button is pressed
@param void
@return bool, true if L button pushed, false otherwise
 */
bool R_hit(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(R_button_GPIO_Port, R_button_Pin) == 0) return true;
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <R_hit+0x20>)
 8000766:	f001 fab5 	bl	8001cd4 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <R_hit+0x18>
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <R_hit+0x1a>
	else return false;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	48000800 	.word	0x48000800

08000780 <Blink_LEDs>:
/**
@brief Blink_LEDs, Quick blink of all LED lights
@param void
@return void, no return value
 */
void Blink_LEDs(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4831      	ldr	r0, [pc, #196]	; (8000850 <Blink_LEDs+0xd0>)
 800078a:	f001 fabb 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	482f      	ldr	r0, [pc, #188]	; (8000850 <Blink_LEDs+0xd0>)
 8000794:	f001 fab6 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f001 faaf 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f001 faa8 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <Blink_LEDs+0xd4>)
 80007bc:	f001 faa2 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c6:	4823      	ldr	r0, [pc, #140]	; (8000854 <Blink_LEDs+0xd4>)
 80007c8:	f001 fa9c 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2104      	movs	r1, #4
 80007d0:	4820      	ldr	r0, [pc, #128]	; (8000854 <Blink_LEDs+0xd4>)
 80007d2:	f001 fa97 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2102      	movs	r1, #2
 80007da:	481e      	ldr	r0, [pc, #120]	; (8000854 <Blink_LEDs+0xd4>)
 80007dc:	f001 fa92 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e4:	f000 ffc6 	bl	8001774 <HAL_Delay>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	4818      	ldr	r0, [pc, #96]	; (8000850 <Blink_LEDs+0xd0>)
 80007ee:	f001 fa89 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <Blink_LEDs+0xd0>)
 80007f8:	f001 fa84 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f001 fa7d 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f001 fa76 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <Blink_LEDs+0xd4>)
 8000820:	f001 fa70 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082a:	480a      	ldr	r0, [pc, #40]	; (8000854 <Blink_LEDs+0xd4>)
 800082c:	f001 fa6a 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <Blink_LEDs+0xd4>)
 8000836:	f001 fa65 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <Blink_LEDs+0xd4>)
 8000840:	f001 fa60 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000848:	f000 ff94 	bl	8001774 <HAL_Delay>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	48000800 	.word	0x48000800
 8000854:	48000400 	.word	0x48000400

08000858 <Show_points>:
 @brief Show_points, shows points on LEDs after missed ball
 @param1 uint8_t L_points points for left player
 @param2 uint8_t R_points points for right player
 @return void, no return value
 */
void Show_points(uint8_t L_points, uint8_t R_points){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
	Blink_LEDs();
 8000868:	f7ff ff8a 	bl	8000780 <Blink_LEDs>
	switch(L_points){
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b04      	cmp	r3, #4
 8000870:	f200 8461 	bhi.w	8001136 <Show_points+0x8de>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <Show_points+0x24>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	08000891 	.word	0x08000891
 8000880:	080009c1 	.word	0x080009c1
 8000884:	08000b33 	.word	0x08000b33
 8000888:	08000ceb 	.word	0x08000ceb
 800088c:	08000ee1 	.word	0x08000ee1
		case 0:
			switch(R_points){
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	2b04      	cmp	r3, #4
 8000894:	f200 8448 	bhi.w	8001128 <Show_points+0x8d0>
 8000898:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <Show_points+0x48>)
 800089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089e:	bf00      	nop
 80008a0:	080009bd 	.word	0x080009bd
 80008a4:	080008b5 	.word	0x080008b5
 80008a8:	080008d3 	.word	0x080008d3
 80008ac:	08000905 	.word	0x08000905
 80008b0:	08000953 	.word	0x08000953
			case 0:
				break;
			case 1:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2140      	movs	r1, #64	; 0x40
 80008b8:	48d1      	ldr	r0, [pc, #836]	; (8000c00 <Show_points+0x3a8>)
 80008ba:	f001 fa23 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 80008be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c2:	f000 ff57 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	48cd      	ldr	r0, [pc, #820]	; (8000c00 <Show_points+0x3a8>)
 80008cc:	f001 fa1a 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 80008d0:	e075      	b.n	80009be <Show_points+0x166>
			case 2:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	48ca      	ldr	r0, [pc, #808]	; (8000c00 <Show_points+0x3a8>)
 80008d8:	f001 fa14 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2120      	movs	r1, #32
 80008e0:	48c7      	ldr	r0, [pc, #796]	; (8000c00 <Show_points+0x3a8>)
 80008e2:	f001 fa0f 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 ff43 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	48c3      	ldr	r0, [pc, #780]	; (8000c00 <Show_points+0x3a8>)
 80008f4:	f001 fa06 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2120      	movs	r1, #32
 80008fc:	48c0      	ldr	r0, [pc, #768]	; (8000c00 <Show_points+0x3a8>)
 80008fe:	f001 fa01 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000902:	e05c      	b.n	80009be <Show_points+0x166>
			case 3:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	48bd      	ldr	r0, [pc, #756]	; (8000c00 <Show_points+0x3a8>)
 800090a:	f001 f9fb 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	48bb      	ldr	r0, [pc, #748]	; (8000c00 <Show_points+0x3a8>)
 8000914:	f001 f9f6 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f001 f9ef 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092a:	f000 ff23 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	48b3      	ldr	r0, [pc, #716]	; (8000c00 <Show_points+0x3a8>)
 8000934:	f001 f9e6 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2120      	movs	r1, #32
 800093c:	48b0      	ldr	r0, [pc, #704]	; (8000c00 <Show_points+0x3a8>)
 800093e:	f001 f9e1 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f001 f9da 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000950:	e035      	b.n	80009be <Show_points+0x166>
			case 4:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	48aa      	ldr	r0, [pc, #680]	; (8000c00 <Show_points+0x3a8>)
 8000958:	f001 f9d4 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2120      	movs	r1, #32
 8000960:	48a7      	ldr	r0, [pc, #668]	; (8000c00 <Show_points+0x3a8>)
 8000962:	f001 f9cf 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f001 f9c8 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f001 f9c1 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8000982:	f241 3088 	movw	r0, #5000	; 0x1388
 8000986:	f000 fef5 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	489c      	ldr	r0, [pc, #624]	; (8000c00 <Show_points+0x3a8>)
 8000990:	f001 f9b8 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2120      	movs	r1, #32
 8000998:	4899      	ldr	r0, [pc, #612]	; (8000c00 <Show_points+0x3a8>)
 800099a:	f001 f9b3 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f001 f9ac 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f001 f9a5 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 80009ba:	e000      	b.n	80009be <Show_points+0x166>
				break;
 80009bc:	bf00      	nop
			}
			break;
 80009be:	e3b3      	b.n	8001128 <Show_points+0x8d0>
		case 1:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2102      	movs	r1, #2
 80009c4:	488f      	ldr	r0, [pc, #572]	; (8000c04 <Show_points+0x3ac>)
 80009c6:	f001 f99d 	bl	8001d04 <HAL_GPIO_WritePin>

			switch(R_points){
 80009ca:	79bb      	ldrb	r3, [r7, #6]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	f200 83ad 	bhi.w	800112c <Show_points+0x8d4>
 80009d2:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <Show_points+0x180>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	080009ed 	.word	0x080009ed
 80009dc:	08000a01 	.word	0x08000a01
 80009e0:	08000a29 	.word	0x08000a29
 80009e4:	08000a65 	.word	0x08000a65
 80009e8:	08000abd 	.word	0x08000abd
			case 0:
				HAL_Delay(1000);
 80009ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f0:	f000 fec0 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	4882      	ldr	r0, [pc, #520]	; (8000c04 <Show_points+0x3ac>)
 80009fa:	f001 f983 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 80009fe:	e097      	b.n	8000b30 <Show_points+0x2d8>
			case 1:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2140      	movs	r1, #64	; 0x40
 8000a04:	487e      	ldr	r0, [pc, #504]	; (8000c00 <Show_points+0x3a8>)
 8000a06:	f001 f97d 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0e:	f000 feb1 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	487a      	ldr	r0, [pc, #488]	; (8000c00 <Show_points+0x3a8>)
 8000a18:	f001 f974 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4878      	ldr	r0, [pc, #480]	; (8000c04 <Show_points+0x3ac>)
 8000a22:	f001 f96f 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000a26:	e083      	b.n	8000b30 <Show_points+0x2d8>
			case 2:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4874      	ldr	r0, [pc, #464]	; (8000c00 <Show_points+0x3a8>)
 8000a2e:	f001 f969 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2120      	movs	r1, #32
 8000a36:	4872      	ldr	r0, [pc, #456]	; (8000c00 <Show_points+0x3a8>)
 8000a38:	f001 f964 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a40:	f000 fe98 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	486d      	ldr	r0, [pc, #436]	; (8000c00 <Show_points+0x3a8>)
 8000a4a:	f001 f95b 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	486b      	ldr	r0, [pc, #428]	; (8000c00 <Show_points+0x3a8>)
 8000a54:	f001 f956 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4869      	ldr	r0, [pc, #420]	; (8000c04 <Show_points+0x3ac>)
 8000a5e:	f001 f951 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000a62:	e065      	b.n	8000b30 <Show_points+0x2d8>
			case 3:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	4865      	ldr	r0, [pc, #404]	; (8000c00 <Show_points+0x3a8>)
 8000a6a:	f001 f94b 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2120      	movs	r1, #32
 8000a72:	4863      	ldr	r0, [pc, #396]	; (8000c00 <Show_points+0x3a8>)
 8000a74:	f001 f946 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f001 f93f 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f000 fe73 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	485b      	ldr	r0, [pc, #364]	; (8000c00 <Show_points+0x3a8>)
 8000a94:	f001 f936 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	4858      	ldr	r0, [pc, #352]	; (8000c00 <Show_points+0x3a8>)
 8000a9e:	f001 f931 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f001 f92a 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4853      	ldr	r0, [pc, #332]	; (8000c04 <Show_points+0x3ac>)
 8000ab6:	f001 f925 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000aba:	e039      	b.n	8000b30 <Show_points+0x2d8>
			case 4:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	484f      	ldr	r0, [pc, #316]	; (8000c00 <Show_points+0x3a8>)
 8000ac2:	f001 f91f 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2120      	movs	r1, #32
 8000aca:	484d      	ldr	r0, [pc, #308]	; (8000c00 <Show_points+0x3a8>)
 8000acc:	f001 f91a 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f001 f913 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f001 f90c 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af0:	f000 fe40 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4841      	ldr	r0, [pc, #260]	; (8000c00 <Show_points+0x3a8>)
 8000afa:	f001 f903 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	483f      	ldr	r0, [pc, #252]	; (8000c00 <Show_points+0x3a8>)
 8000b04:	f001 f8fe 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f001 f8f7 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 f8f0 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2102      	movs	r1, #2
 8000b28:	4836      	ldr	r0, [pc, #216]	; (8000c04 <Show_points+0x3ac>)
 8000b2a:	f001 f8eb 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000b2e:	bf00      	nop
			}
			break;
 8000b30:	e2fc      	b.n	800112c <Show_points+0x8d4>
		case 2:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2102      	movs	r1, #2
 8000b36:	4833      	ldr	r0, [pc, #204]	; (8000c04 <Show_points+0x3ac>)
 8000b38:	f001 f8e4 	bl	8001d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4830      	ldr	r0, [pc, #192]	; (8000c04 <Show_points+0x3ac>)
 8000b42:	f001 f8df 	bl	8001d04 <HAL_GPIO_WritePin>

			switch(R_points){
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	f200 82f1 	bhi.w	8001130 <Show_points+0x8d8>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <Show_points+0x2fc>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000b69 	.word	0x08000b69
 8000b58:	08000b87 	.word	0x08000b87
 8000b5c:	08000bb9 	.word	0x08000bb9
 8000b60:	08000c09 	.word	0x08000c09
 8000b64:	08000c6b 	.word	0x08000c6b
			case 0:
				HAL_Delay(1000);
 8000b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6c:	f000 fe02 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2102      	movs	r1, #2
 8000b74:	4823      	ldr	r0, [pc, #140]	; (8000c04 <Show_points+0x3ac>)
 8000b76:	f001 f8c5 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4821      	ldr	r0, [pc, #132]	; (8000c04 <Show_points+0x3ac>)
 8000b80:	f001 f8c0 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000b84:	e0b0      	b.n	8000ce8 <Show_points+0x490>
			case 1:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	481d      	ldr	r0, [pc, #116]	; (8000c00 <Show_points+0x3a8>)
 8000b8c:	f001 f8ba 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b94:	f000 fdee 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <Show_points+0x3a8>)
 8000b9e:	f001 f8b1 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4817      	ldr	r0, [pc, #92]	; (8000c04 <Show_points+0x3ac>)
 8000ba8:	f001 f8ac 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4814      	ldr	r0, [pc, #80]	; (8000c04 <Show_points+0x3ac>)
 8000bb2:	f001 f8a7 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000bb6:	e097      	b.n	8000ce8 <Show_points+0x490>
			case 2:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4810      	ldr	r0, [pc, #64]	; (8000c00 <Show_points+0x3a8>)
 8000bbe:	f001 f8a1 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <Show_points+0x3a8>)
 8000bc8:	f001 f89c 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd0:	f000 fdd0 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <Show_points+0x3a8>)
 8000bda:	f001 f893 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <Show_points+0x3a8>)
 8000be4:	f001 f88e 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2102      	movs	r1, #2
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <Show_points+0x3ac>)
 8000bee:	f001 f889 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <Show_points+0x3ac>)
 8000bf8:	f001 f884 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000bfc:	e074      	b.n	8000ce8 <Show_points+0x490>
 8000bfe:	bf00      	nop
 8000c00:	48000800 	.word	0x48000800
 8000c04:	48000400 	.word	0x48000400
			case 3:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	; 0x40
 8000c0c:	48d6      	ldr	r0, [pc, #856]	; (8000f68 <Show_points+0x710>)
 8000c0e:	f001 f879 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2120      	movs	r1, #32
 8000c16:	48d4      	ldr	r0, [pc, #848]	; (8000f68 <Show_points+0x710>)
 8000c18:	f001 f874 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f001 f86d 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2e:	f000 fda1 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	48cc      	ldr	r0, [pc, #816]	; (8000f68 <Show_points+0x710>)
 8000c38:	f001 f864 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2120      	movs	r1, #32
 8000c40:	48c9      	ldr	r0, [pc, #804]	; (8000f68 <Show_points+0x710>)
 8000c42:	f001 f85f 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f001 f858 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2102      	movs	r1, #2
 8000c58:	48c4      	ldr	r0, [pc, #784]	; (8000f6c <Show_points+0x714>)
 8000c5a:	f001 f853 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2104      	movs	r1, #4
 8000c62:	48c2      	ldr	r0, [pc, #776]	; (8000f6c <Show_points+0x714>)
 8000c64:	f001 f84e 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000c68:	e03e      	b.n	8000ce8 <Show_points+0x490>
			case 4:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	48be      	ldr	r0, [pc, #760]	; (8000f68 <Show_points+0x710>)
 8000c70:	f001 f848 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2120      	movs	r1, #32
 8000c78:	48bb      	ldr	r0, [pc, #748]	; (8000f68 <Show_points+0x710>)
 8000c7a:	f001 f843 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f001 f83c 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f001 f835 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9e:	f000 fd69 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	48b0      	ldr	r0, [pc, #704]	; (8000f68 <Show_points+0x710>)
 8000ca8:	f001 f82c 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2120      	movs	r1, #32
 8000cb0:	48ad      	ldr	r0, [pc, #692]	; (8000f68 <Show_points+0x710>)
 8000cb2:	f001 f827 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f001 f820 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cce:	f001 f819 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	48a5      	ldr	r0, [pc, #660]	; (8000f6c <Show_points+0x714>)
 8000cd8:	f001 f814 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2104      	movs	r1, #4
 8000ce0:	48a2      	ldr	r0, [pc, #648]	; (8000f6c <Show_points+0x714>)
 8000ce2:	f001 f80f 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000ce6:	bf00      	nop
			}
			break;
 8000ce8:	e222      	b.n	8001130 <Show_points+0x8d8>
		case 3:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2102      	movs	r1, #2
 8000cee:	489f      	ldr	r0, [pc, #636]	; (8000f6c <Show_points+0x714>)
 8000cf0:	f001 f808 	bl	8001d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	489c      	ldr	r0, [pc, #624]	; (8000f6c <Show_points+0x714>)
 8000cfa:	f001 f803 	bl	8001d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d04:	4899      	ldr	r0, [pc, #612]	; (8000f6c <Show_points+0x714>)
 8000d06:	f000 fffd 	bl	8001d04 <HAL_GPIO_WritePin>

			switch(R_points){
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	f200 8211 	bhi.w	8001134 <Show_points+0x8dc>
 8000d12:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <Show_points+0x4c0>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000d2d 	.word	0x08000d2d
 8000d1c:	08000d57 	.word	0x08000d57
 8000d20:	08000d95 	.word	0x08000d95
 8000d24:	08000de7 	.word	0x08000de7
 8000d28:	08000e55 	.word	0x08000e55
			case 0:
				HAL_Delay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f000 fd20 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2102      	movs	r1, #2
 8000d38:	488c      	ldr	r0, [pc, #560]	; (8000f6c <Show_points+0x714>)
 8000d3a:	f000 ffe3 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2104      	movs	r1, #4
 8000d42:	488a      	ldr	r0, [pc, #552]	; (8000f6c <Show_points+0x714>)
 8000d44:	f000 ffde 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4e:	4887      	ldr	r0, [pc, #540]	; (8000f6c <Show_points+0x714>)
 8000d50:	f000 ffd8 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000d54:	e0c3      	b.n	8000ede <Show_points+0x686>
			case 1:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2140      	movs	r1, #64	; 0x40
 8000d5a:	4883      	ldr	r0, [pc, #524]	; (8000f68 <Show_points+0x710>)
 8000d5c:	f000 ffd2 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f000 fd06 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	487e      	ldr	r0, [pc, #504]	; (8000f68 <Show_points+0x710>)
 8000d6e:	f000 ffc9 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2102      	movs	r1, #2
 8000d76:	487d      	ldr	r0, [pc, #500]	; (8000f6c <Show_points+0x714>)
 8000d78:	f000 ffc4 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	487a      	ldr	r0, [pc, #488]	; (8000f6c <Show_points+0x714>)
 8000d82:	f000 ffbf 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4877      	ldr	r0, [pc, #476]	; (8000f6c <Show_points+0x714>)
 8000d8e:	f000 ffb9 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000d92:	e0a4      	b.n	8000ede <Show_points+0x686>
			case 2:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	4873      	ldr	r0, [pc, #460]	; (8000f68 <Show_points+0x710>)
 8000d9a:	f000 ffb3 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2120      	movs	r1, #32
 8000da2:	4871      	ldr	r0, [pc, #452]	; (8000f68 <Show_points+0x710>)
 8000da4:	f000 ffae 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f000 fce2 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	486c      	ldr	r0, [pc, #432]	; (8000f68 <Show_points+0x710>)
 8000db6:	f000 ffa5 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	486a      	ldr	r0, [pc, #424]	; (8000f68 <Show_points+0x710>)
 8000dc0:	f000 ffa0 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4868      	ldr	r0, [pc, #416]	; (8000f6c <Show_points+0x714>)
 8000dca:	f000 ff9b 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4866      	ldr	r0, [pc, #408]	; (8000f6c <Show_points+0x714>)
 8000dd4:	f000 ff96 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dde:	4863      	ldr	r0, [pc, #396]	; (8000f6c <Show_points+0x714>)
 8000de0:	f000 ff90 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000de4:	e07b      	b.n	8000ede <Show_points+0x686>
			case 3:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	485f      	ldr	r0, [pc, #380]	; (8000f68 <Show_points+0x710>)
 8000dec:	f000 ff8a 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2120      	movs	r1, #32
 8000df4:	485c      	ldr	r0, [pc, #368]	; (8000f68 <Show_points+0x710>)
 8000df6:	f000 ff85 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f000 ff7e 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0c:	f000 fcb2 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	4854      	ldr	r0, [pc, #336]	; (8000f68 <Show_points+0x710>)
 8000e16:	f000 ff75 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4852      	ldr	r0, [pc, #328]	; (8000f68 <Show_points+0x710>)
 8000e20:	f000 ff70 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f000 ff69 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2102      	movs	r1, #2
 8000e36:	484d      	ldr	r0, [pc, #308]	; (8000f6c <Show_points+0x714>)
 8000e38:	f000 ff64 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2104      	movs	r1, #4
 8000e40:	484a      	ldr	r0, [pc, #296]	; (8000f6c <Show_points+0x714>)
 8000e42:	f000 ff5f 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4c:	4847      	ldr	r0, [pc, #284]	; (8000f6c <Show_points+0x714>)
 8000e4e:	f000 ff59 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000e52:	e044      	b.n	8000ede <Show_points+0x686>
			case 4:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	4843      	ldr	r0, [pc, #268]	; (8000f68 <Show_points+0x710>)
 8000e5a:	f000 ff53 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2120      	movs	r1, #32
 8000e62:	4841      	ldr	r0, [pc, #260]	; (8000f68 <Show_points+0x710>)
 8000e64:	f000 ff4e 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f000 ff47 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f000 ff40 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e88:	f000 fc74 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	4835      	ldr	r0, [pc, #212]	; (8000f68 <Show_points+0x710>)
 8000e92:	f000 ff37 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4833      	ldr	r0, [pc, #204]	; (8000f68 <Show_points+0x710>)
 8000e9c:	f000 ff32 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 ff2b 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 ff24 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	482a      	ldr	r0, [pc, #168]	; (8000f6c <Show_points+0x714>)
 8000ec2:	f000 ff1f 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4828      	ldr	r0, [pc, #160]	; (8000f6c <Show_points+0x714>)
 8000ecc:	f000 ff1a 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed6:	4825      	ldr	r0, [pc, #148]	; (8000f6c <Show_points+0x714>)
 8000ed8:	f000 ff14 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000edc:	bf00      	nop
			}
			break;
 8000ede:	e129      	b.n	8001134 <Show_points+0x8dc>
		case 4:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4821      	ldr	r0, [pc, #132]	; (8000f6c <Show_points+0x714>)
 8000ee6:	f000 ff0d 	bl	8001d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2104      	movs	r1, #4
 8000eee:	481f      	ldr	r0, [pc, #124]	; (8000f6c <Show_points+0x714>)
 8000ef0:	f000 ff08 	bl	8001d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efa:	481c      	ldr	r0, [pc, #112]	; (8000f6c <Show_points+0x714>)
 8000efc:	f000 ff02 	bl	8001d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <Show_points+0x714>)
 8000f08:	f000 fefc 	bl	8001d04 <HAL_GPIO_WritePin>

			switch(R_points){
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	f200 8111 	bhi.w	8001136 <Show_points+0x8de>
 8000f14:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <Show_points+0x6c4>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f31 	.word	0x08000f31
 8000f20:	08000f71 	.word	0x08000f71
 8000f24:	08000fbb 	.word	0x08000fbb
 8000f28:	08001019 	.word	0x08001019
 8000f2c:	08001093 	.word	0x08001093
			case 0:
				HAL_Delay(5000);
 8000f30:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f34:	f000 fc1e 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <Show_points+0x714>)
 8000f3e:	f000 fee1 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2104      	movs	r1, #4
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <Show_points+0x714>)
 8000f48:	f000 fedc 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <Show_points+0x714>)
 8000f54:	f000 fed6 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <Show_points+0x714>)
 8000f60:	f000 fed0 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000f64:	e0e7      	b.n	8001136 <Show_points+0x8de>
 8000f66:	bf00      	nop
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	48000400 	.word	0x48000400
			case 1:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	4872      	ldr	r0, [pc, #456]	; (8001140 <Show_points+0x8e8>)
 8000f76:	f000 fec5 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8000f7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f7e:	f000 fbf9 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	486e      	ldr	r0, [pc, #440]	; (8001140 <Show_points+0x8e8>)
 8000f88:	f000 febc 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	486c      	ldr	r0, [pc, #432]	; (8001144 <Show_points+0x8ec>)
 8000f92:	f000 feb7 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2104      	movs	r1, #4
 8000f9a:	486a      	ldr	r0, [pc, #424]	; (8001144 <Show_points+0x8ec>)
 8000f9c:	f000 feb2 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa6:	4867      	ldr	r0, [pc, #412]	; (8001144 <Show_points+0x8ec>)
 8000fa8:	f000 feac 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb2:	4864      	ldr	r0, [pc, #400]	; (8001144 <Show_points+0x8ec>)
 8000fb4:	f000 fea6 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8000fb8:	e0bd      	b.n	8001136 <Show_points+0x8de>
			case 2:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	4860      	ldr	r0, [pc, #384]	; (8001140 <Show_points+0x8e8>)
 8000fc0:	f000 fea0 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	485d      	ldr	r0, [pc, #372]	; (8001140 <Show_points+0x8e8>)
 8000fca:	f000 fe9b 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8000fce:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fd2:	f000 fbcf 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2140      	movs	r1, #64	; 0x40
 8000fda:	4859      	ldr	r0, [pc, #356]	; (8001140 <Show_points+0x8e8>)
 8000fdc:	f000 fe92 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	4856      	ldr	r0, [pc, #344]	; (8001140 <Show_points+0x8e8>)
 8000fe6:	f000 fe8d 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2102      	movs	r1, #2
 8000fee:	4855      	ldr	r0, [pc, #340]	; (8001144 <Show_points+0x8ec>)
 8000ff0:	f000 fe88 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4852      	ldr	r0, [pc, #328]	; (8001144 <Show_points+0x8ec>)
 8000ffa:	f000 fe83 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001004:	484f      	ldr	r0, [pc, #316]	; (8001144 <Show_points+0x8ec>)
 8001006:	f000 fe7d 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001010:	484c      	ldr	r0, [pc, #304]	; (8001144 <Show_points+0x8ec>)
 8001012:	f000 fe77 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8001016:	e08e      	b.n	8001136 <Show_points+0x8de>
			case 3:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	4848      	ldr	r0, [pc, #288]	; (8001140 <Show_points+0x8e8>)
 800101e:	f000 fe71 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2120      	movs	r1, #32
 8001026:	4846      	ldr	r0, [pc, #280]	; (8001140 <Show_points+0x8e8>)
 8001028:	f000 fe6c 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f000 fe65 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 800103a:	f241 3088 	movw	r0, #5000	; 0x1388
 800103e:	f000 fb99 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	483e      	ldr	r0, [pc, #248]	; (8001140 <Show_points+0x8e8>)
 8001048:	f000 fe5c 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2120      	movs	r1, #32
 8001050:	483b      	ldr	r0, [pc, #236]	; (8001140 <Show_points+0x8e8>)
 8001052:	f000 fe57 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f000 fe50 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2102      	movs	r1, #2
 8001068:	4836      	ldr	r0, [pc, #216]	; (8001144 <Show_points+0x8ec>)
 800106a:	f000 fe4b 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2104      	movs	r1, #4
 8001072:	4834      	ldr	r0, [pc, #208]	; (8001144 <Show_points+0x8ec>)
 8001074:	f000 fe46 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107e:	4831      	ldr	r0, [pc, #196]	; (8001144 <Show_points+0x8ec>)
 8001080:	f000 fe40 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	482e      	ldr	r0, [pc, #184]	; (8001144 <Show_points+0x8ec>)
 800108c:	f000 fe3a 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8001090:	e051      	b.n	8001136 <Show_points+0x8de>
			case 4:
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	482a      	ldr	r0, [pc, #168]	; (8001140 <Show_points+0x8e8>)
 8001098:	f000 fe34 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2120      	movs	r1, #32
 80010a0:	4827      	ldr	r0, [pc, #156]	; (8001140 <Show_points+0x8e8>)
 80010a2:	f000 fe2f 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f000 fe28 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f000 fe21 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 80010c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80010c6:	f000 fb55 	bl	8001774 <HAL_Delay>
				HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	481c      	ldr	r0, [pc, #112]	; (8001140 <Show_points+0x8e8>)
 80010d0:	f000 fe18 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2120      	movs	r1, #32
 80010d8:	4819      	ldr	r0, [pc, #100]	; (8001140 <Show_points+0x8e8>)
 80010da:	f000 fe13 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fe0c 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f000 fe05 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <Show_points+0x8ec>)
 8001100:	f000 fe00 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2104      	movs	r1, #4
 8001108:	480e      	ldr	r0, [pc, #56]	; (8001144 <Show_points+0x8ec>)
 800110a:	f000 fdfb 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <Show_points+0x8ec>)
 8001116:	f000 fdf5 	bl	8001d04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <Show_points+0x8ec>)
 8001122:	f000 fdef 	bl	8001d04 <HAL_GPIO_WritePin>
				break;
 8001126:	e006      	b.n	8001136 <Show_points+0x8de>
			break;
 8001128:	bf00      	nop
 800112a:	e004      	b.n	8001136 <Show_points+0x8de>
			break;
 800112c:	bf00      	nop
 800112e:	e002      	b.n	8001136 <Show_points+0x8de>
			break;
 8001130:	bf00      	nop
 8001132:	e000      	b.n	8001136 <Show_points+0x8de>
			break;
 8001134:	bf00      	nop
			}
		}
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	48000800 	.word	0x48000800
 8001144:	48000400 	.word	0x48000400

08001148 <Led_on>:
@param uint8_t Lednr, number to the Led that is turned on.
		Lednr can be 1-8, all other values turns all leds off.

@return void
**/
void Led_on(uint8_t Lednr){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 1; i<=8; i++){
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e0a6      	b.n	80012a6 <Led_on+0x15e>
		switch(i){
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	3b01      	subs	r3, #1
 800115c:	2b07      	cmp	r3, #7
 800115e:	f200 809f 	bhi.w	80012a0 <Led_on+0x158>
 8001162:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <Led_on+0x20>)
 8001164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001168:	08001189 	.word	0x08001189
 800116c:	080011a9 	.word	0x080011a9
 8001170:	080011c9 	.word	0x080011c9
 8001174:	080011ed 	.word	0x080011ed
 8001178:	08001211 	.word	0x08001211
 800117c:	08001239 	.word	0x08001239
 8001180:	08001261 	.word	0x08001261
 8001184:	08001281 	.word	0x08001281
		case 1:
			if(Lednr==i) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	429a      	cmp	r2, r3
 800118e:	d105      	bne.n	800119c <Led_on+0x54>
 8001190:	2201      	movs	r2, #1
 8001192:	2102      	movs	r1, #2
 8001194:	4848      	ldr	r0, [pc, #288]	; (80012b8 <Led_on+0x170>)
 8001196:	f000 fdb5 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			break;
 800119a:	e081      	b.n	80012a0 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	4845      	ldr	r0, [pc, #276]	; (80012b8 <Led_on+0x170>)
 80011a2:	f000 fdaf 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 80011a6:	e07b      	b.n	80012a0 <Led_on+0x158>
		case 2:
			if(Lednr==i) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d105      	bne.n	80011bc <Led_on+0x74>
 80011b0:	2201      	movs	r2, #1
 80011b2:	2104      	movs	r1, #4
 80011b4:	4840      	ldr	r0, [pc, #256]	; (80012b8 <Led_on+0x170>)
 80011b6:	f000 fda5 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
			break;
 80011ba:	e071      	b.n	80012a0 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2104      	movs	r1, #4
 80011c0:	483d      	ldr	r0, [pc, #244]	; (80012b8 <Led_on+0x170>)
 80011c2:	f000 fd9f 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 80011c6:	e06b      	b.n	80012a0 <Led_on+0x158>
		case 3:
			if(Lednr==i) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d106      	bne.n	80011de <Led_on+0x96>
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d6:	4838      	ldr	r0, [pc, #224]	; (80012b8 <Led_on+0x170>)
 80011d8:	f000 fd94 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
 80011dc:	e060      	b.n	80012a0 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	4834      	ldr	r0, [pc, #208]	; (80012b8 <Led_on+0x170>)
 80011e6:	f000 fd8d 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 80011ea:	e059      	b.n	80012a0 <Led_on+0x158>
		case 4:
			if(Lednr==i) HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d106      	bne.n	8001202 <Led_on+0xba>
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fa:	482f      	ldr	r0, [pc, #188]	; (80012b8 <Led_on+0x170>)
 80011fc:	f000 fd82 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
			break;
 8001200:	e04e      	b.n	80012a0 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001208:	482b      	ldr	r0, [pc, #172]	; (80012b8 <Led_on+0x170>)
 800120a:	f000 fd7b 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 800120e:	e047      	b.n	80012a0 <Led_on+0x158>
		case 5:
			if(Lednr==i) HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	429a      	cmp	r2, r3
 8001216:	d107      	bne.n	8001228 <Led_on+0xe0>
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f000 fd6f 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
			break;
 8001226:	e03b      	b.n	80012a0 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f000 fd67 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 8001236:	e033      	b.n	80012a0 <Led_on+0x158>
		case 6:
			if(Lednr==i) HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	429a      	cmp	r2, r3
 800123e:	d107      	bne.n	8001250 <Led_on+0x108>
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fd5b 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
			break;
 800124e:	e027      	b.n	80012a0 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fd53 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 800125e:	e01f      	b.n	80012a0 <Led_on+0x158>
		case 7:
			if(Lednr==i) HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	429a      	cmp	r2, r3
 8001266:	d105      	bne.n	8001274 <Led_on+0x12c>
 8001268:	2201      	movs	r2, #1
 800126a:	2120      	movs	r1, #32
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <Led_on+0x174>)
 800126e:	f000 fd49 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
			break;
 8001272:	e015      	b.n	80012a0 <Led_on+0x158>
			else HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2120      	movs	r1, #32
 8001278:	4810      	ldr	r0, [pc, #64]	; (80012bc <Led_on+0x174>)
 800127a:	f000 fd43 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 800127e:	e00f      	b.n	80012a0 <Led_on+0x158>
		case 8:
			if(Lednr==i) HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	429a      	cmp	r2, r3
 8001286:	d105      	bne.n	8001294 <Led_on+0x14c>
 8001288:	2201      	movs	r2, #1
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <Led_on+0x174>)
 800128e:	f000 fd39 	bl	8001d04 <HAL_GPIO_WritePin>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
			break;
 8001292:	e004      	b.n	800129e <Led_on+0x156>
			else HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <Led_on+0x174>)
 800129a:	f000 fd33 	bl	8001d04 <HAL_GPIO_WritePin>
			break;
 800129e:	bf00      	nop
	for (i = 1; i<=8; i++){
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	3301      	adds	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	f67f af55 	bls.w	8001158 <Led_on+0x10>
		}
	}
	return;
 80012ae:	bf00      	nop
}
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x44>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_MspInit+0x44>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6613      	str	r3, [r2, #96]	; 0x60
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x44>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x44>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x44>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f9ec 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <SystemInit+0x64>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <SystemInit+0x64>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <SystemInit+0x68>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <SystemInit+0x68>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <SystemInit+0x68>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <SystemInit+0x68>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <SystemInit+0x68>)
 8001390:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001394:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001398:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <SystemInit+0x68>)
 800139c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SystemInit+0x68>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <SystemInit+0x68>)
 80013a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <SystemInit+0x68>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SystemInit+0x64>)
 80013b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ba:	609a      	str	r2, [r3, #8]
#endif
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	40021000 	.word	0x40021000

080013d0 <Test_program>:

/**
@brief Test_program, runs all the program test functions.
@param void
 */
void Test_program(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	Test_Led();
 80013d4:	f000 f85a 	bl	800148c <Test_Led>
	Test_blink();
 80013d8:	f000 f87b 	bl	80014d2 <Test_blink>
	Test_show_points();
 80013dc:	f000 f88f 	bl	80014fe <Test_show_points>
	Test_buttons();
 80013e0:	f000 f802 	bl	80013e8 <Test_buttons>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <Test_buttons>:

/**
@brief Test_buttons, checks if the buttons are working fine.
@param void
 */
void Test_buttons(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	int8_t j;

	/* Checking buttons */
	j=4;
 80013ee:	2304      	movs	r3, #4
 80013f0:	71fb      	strb	r3, [r7, #7]
	Led_on(j); //Light on
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fea7 	bl	8001148 <Led_on>

	while(j<9 && j>0){
 80013fa:	e03b      	b.n	8001474 <Test_buttons+0x8c>
		if(L_hit() == true){ 	//Wait for left button hit
 80013fc:	f7ff f99c 	bl	8000738 <L_hit>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d015      	beq.n	8001432 <Test_buttons+0x4a>
			j++;				//Next led to the right
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3301      	adds	r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	71fb      	strb	r3, [r7, #7]
			Led_on(j);			//Light on
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe97 	bl	8001148 <Led_on>
			HAL_Delay(100);		//100 ms
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f000 f9aa 	bl	8001774 <HAL_Delay>
			while(L_hit() == true); //Wait for button release
 8001420:	bf00      	nop
 8001422:	f7ff f989 	bl	8000738 <L_hit>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1fa      	bne.n	8001422 <Test_buttons+0x3a>
			HAL_Delay(100);		//100 ms
 800142c:	2064      	movs	r0, #100	; 0x64
 800142e:	f000 f9a1 	bl	8001774 <HAL_Delay>
		}
		if(R_hit() == true){	//Wait for right button hit
 8001432:	f7ff f993 	bl	800075c <R_hit>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d11b      	bne.n	8001474 <Test_buttons+0x8c>
			j--;				//next led to the left
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	71fb      	strb	r3, [r7, #7]
			Led_on(j);			//Led on
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fe7c 	bl	8001148 <Led_on>
			HAL_Delay(100);		//100 ms
 8001450:	2064      	movs	r0, #100	; 0x64
 8001452:	f000 f98f 	bl	8001774 <HAL_Delay>
			while(R_hit() == true);	//Wait for button release
 8001456:	bf00      	nop
 8001458:	f7ff f980 	bl	800075c <R_hit>
 800145c:	4603      	mov	r3, r0
 800145e:	2b01      	cmp	r3, #1
 8001460:	d0fa      	beq.n	8001458 <Test_buttons+0x70>
			HAL_Delay(100);		//100 ms
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f000 f986 	bl	8001774 <HAL_Delay>
			if(j<1) j=0;		//start again from left
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dc01      	bgt.n	8001474 <Test_buttons+0x8c>
 8001470:	2300      	movs	r3, #0
 8001472:	71fb      	strb	r3, [r7, #7]
	while(j<9 && j>0){
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b08      	cmp	r3, #8
 800147a:	dc03      	bgt.n	8001484 <Test_buttons+0x9c>
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	dcbb      	bgt.n	80013fc <Test_buttons+0x14>
		}
	}
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <Test_Led>:

/**
@brief Test_Led, checks if the LED:s are working fine.
@param void
 */
void Test_Led(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	int8_t Lednr;
	/* Loop checking that all leds can be turned on */
	for (Lednr = 1; Lednr <= 8; Lednr++){
 8001492:	2301      	movs	r3, #1
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	e00d      	b.n	80014b4 <Test_Led+0x28>
		Led_on(Lednr);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fe54 	bl	8001148 <Led_on>
		HAL_Delay(500);
 80014a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a4:	f000 f966 	bl	8001774 <HAL_Delay>
	for (Lednr = 1; Lednr <= 8; Lednr++){
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	dded      	ble.n	8001498 <Test_Led+0xc>
	}
	Led_on(9);	//Turn off Led8
 80014bc:	2009      	movs	r0, #9
 80014be:	f7ff fe43 	bl	8001148 <Led_on>
	HAL_Delay(1000);	//1000 ms
 80014c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c6:	f000 f955 	bl	8001774 <HAL_Delay>
	return;
 80014ca:	bf00      	nop
}
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <Test_blink>:

/**
@brief Test_blink, blinks LEDs three times.
@param void
 */
void Test_blink(void){
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
	int8_t i;
	for(i = 0; i < 4; i++){
 80014d8:	2300      	movs	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	e007      	b.n	80014ee <Test_blink+0x1c>
		Blink_LEDs();
 80014de:	f7ff f94f 	bl	8000780 <Blink_LEDs>
	for(i = 0; i < 4; i++){
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	ddf3      	ble.n	80014de <Test_blink+0xc>
	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <Test_show_points>:

/**
@brief Test_show_points, checks if the LED:s are able to show all possible scores.
@param void
 */
void Test_show_points(void){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
	int8_t i;
	int8_t j;
	for(i = 0; i <= 4; i++){
 8001504:	2300      	movs	r3, #0
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e018      	b.n	800153c <Test_show_points+0x3e>
		for(j = 0; j <= 4; j++){
 800150a:	2300      	movs	r3, #0
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	e00b      	b.n	8001528 <Test_show_points+0x2a>
			Show_points(i,j);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	79ba      	ldrb	r2, [r7, #6]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f99e 	bl	8000858 <Show_points>
		for(j = 0; j <= 4; j++){
 800151c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3301      	adds	r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	71bb      	strb	r3, [r7, #6]
 8001528:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800152c:	2b04      	cmp	r3, #4
 800152e:	ddef      	ble.n	8001510 <Test_show_points+0x12>
	for(i = 0; i <= 4; i++){
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	3301      	adds	r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b04      	cmp	r3, #4
 8001542:	dde2      	ble.n	800150a <Test_show_points+0xc>
		}
	}
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <MX_USART2_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART2_UART_Init+0x58>)
 8001590:	f001 fe98 	bl	80032c4 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f7ff f80a 	bl	80005b2 <Error_Handler>
  }

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000028 	.word	0x20000028
 80015a8:	40004400 	.word	0x40004400

080015ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_UART_MspInit+0x7c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d128      	bne.n	8001620 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_UART_MspInit+0x80>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <HAL_UART_MspInit+0x80>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_UART_MspInit+0x80>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_UART_MspInit+0x80>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_UART_MspInit+0x80>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_UART_MspInit+0x80>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f000 f9b2 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40004400 	.word	0x40004400
 800162c:	40021000 	.word	0x40021000

08001630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001668 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001634:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001636:	e003      	b.n	8001640 <LoopCopyDataInit>

08001638 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800163a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800163c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800163e:	3104      	adds	r1, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001644:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001646:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001648:	d3f6      	bcc.n	8001638 <CopyDataInit>
	ldr	r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopForever+0x12>)
	b	LoopFillZerobss
 800164c:	e002      	b.n	8001654 <LoopFillZerobss>

0800164e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800164e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001650:	f842 3b04 	str.w	r3, [r2], #4

08001654 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <LoopForever+0x16>)
	cmp	r2, r3
 8001656:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001658:	d3f9      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800165a:	f7ff fe83 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f002 faf7 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001662:	f7ff f85b 	bl	800071c <main>

08001666 <LoopForever>:

LoopForever:
    b LoopForever
 8001666:	e7fe      	b.n	8001666 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001668:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800166c:	08003d18 	.word	0x08003d18
	ldr	r0, =_sdata
 8001670:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001674:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001678:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800167c:	200000ac 	.word	0x200000ac

08001680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>
	...

08001684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_Init+0x3c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_Init+0x3c>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f93e 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f80f 	bl	80016c4 <HAL_InitTick>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	e001      	b.n	80016b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b2:	f7ff fe05 	bl	80012c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40022000 	.word	0x40022000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_InitTick+0x68>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d022      	beq.n	800171e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_InitTick+0x6c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_InitTick+0x68>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f93c 	bl	800196a <HAL_SYSTICK_Config>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10f      	bne.n	8001718 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	d809      	bhi.n	8001712 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fe:	2200      	movs	r2, #0
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	f04f 30ff 	mov.w	r0, #4294967295
 8001706:	f000 f914 	bl	8001932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_InitTick+0x70>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e007      	b.n	8001722 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e004      	b.n	8001722 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e001      	b.n	8001722 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000008 	.word	0x20000008
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4413      	add	r3, r2
 8001746:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_IncTick+0x1c>)
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200000a8 	.word	0x200000a8
 8001758:	20000008 	.word	0x20000008

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200000a8 	.word	0x200000a8

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d004      	beq.n	8001798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_Delay+0x40>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001798:	bf00      	nop
 800179a:	f7ff ffdf 	bl	800175c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d8f7      	bhi.n	800179a <HAL_Delay+0x26>
  {
  }
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff47 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff5c 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff8e 	bl	8001870 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5d 	bl	800181c <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffb0 	bl	80018d8 <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e17f      	b.n	8001c94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8171 	beq.w	8001c8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x38>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	d123      	bne.n	8001a04 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d00b      	beq.n	8001a58 <HAL_GPIO_Init+0xd4>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d007      	beq.n	8001a58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4c:	2b11      	cmp	r3, #17
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b12      	cmp	r3, #18
 8001a56:	d130      	bne.n	8001aba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8e:	2201      	movs	r2, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	f003 0201 	and.w	r2, r3, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d118      	bne.n	8001af8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001acc:	2201      	movs	r2, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	f003 0201 	and.w	r2, r3, #1
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ac 	beq.w	8001c8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3a:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6613      	str	r3, [r2, #96]	; 0x60
 8001b42:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b4e:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x242>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_GPIO_Init+0x334>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x23e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_GPIO_Init+0x338>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x23a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_GPIO_Init+0x33c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x236>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_GPIO_Init+0x340>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x232>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_GPIO_Init+0x344>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x22e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_GPIO_Init+0x348>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x22a>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd8:	4936      	ldr	r1, [pc, #216]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0a:	4a31      	ldr	r2, [pc, #196]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c3a:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f47f ae78 	bne.w	8001994 <HAL_GPIO_Init+0x10>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	48000c00 	.word	0x48000c00
 8001cc4:	48001000 	.word	0x48001000
 8001cc8:	48001400 	.word	0x48001400
 8001ccc:	48001800 	.word	0x48001800
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40007000 	.word	0x40007000

08001d50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d5e:	d130      	bne.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d6c:	d038      	beq.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d76:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2232      	movs	r2, #50	; 0x32
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	3301      	adds	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d94:	e002      	b.n	8001d9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da8:	d102      	bne.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f2      	bne.n	8001d96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbc:	d110      	bne.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e00f      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dce:	d007      	beq.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd8:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40007000 	.word	0x40007000
 8001df4:	20000000 	.word	0x20000000
 8001df8:	431bde83 	.word	0x431bde83

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e39d      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0e:	4ba4      	ldr	r3, [pc, #656]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e18:	4ba1      	ldr	r3, [pc, #644]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80e1 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4a>
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	f040 8088 	bne.w	8001f4e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 8084 	bne.w	8001f4e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e46:	4b96      	ldr	r3, [pc, #600]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e375      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1a      	ldr	r2, [r3, #32]
 8001e62:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <HAL_RCC_OscConfig+0x7c>
 8001e6e:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e76:	e005      	b.n	8001e84 <HAL_RCC_OscConfig+0x88>
 8001e78:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d223      	bcs.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fd09 	bl	80028a4 <RCC_SetFlashLatencyFromMSIRange>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e356      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a7f      	ldr	r2, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b7d      	ldr	r3, [pc, #500]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	497a      	ldr	r1, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eba:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	4975      	ldr	r1, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
 8001ece:	e022      	b.n	8001f16 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed0:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	496d      	ldr	r1, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eee:	4b6c      	ldr	r3, [pc, #432]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	4968      	ldr	r1, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fccc 	bl	80028a4 <RCC_SetFlashLatencyFromMSIRange>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e319      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f16:	f000 fc03 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <HAL_RCC_OscConfig+0x2a8>)
 8001f28:	5cd3      	ldrb	r3, [r2, r3]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f32:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f36:	4b5d      	ldr	r3, [pc, #372]	; (80020ac <HAL_RCC_OscConfig+0x2b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fbc2 	bl	80016c4 <HAL_InitTick>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d052      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	e2fd      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d032      	beq.n	8001fbc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fbfb 	bl	800175c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fbf7 	bl	800175c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2e6      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f88:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a44      	ldr	r2, [pc, #272]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001f8e:	f043 0308 	orr.w	r3, r3, #8
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	493f      	ldr	r1, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	493a      	ldr	r1, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
 8001fba:	e01a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fbc8 	bl	800175c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fbc4 	bl	800175c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e2b3      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1d4>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d074      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x214>
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d10e      	bne.n	8002028 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d10b      	bne.n	8002028 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d064      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2ea>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d160      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e290      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002030:	d106      	bne.n	8002040 <HAL_RCC_OscConfig+0x244>
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0x280>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x268>
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x280>
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_RCC_OscConfig+0x2a4>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff fb6a 	bl	800175c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208a:	e011      	b.n	80020b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff fb66 	bl	800175c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d90a      	bls.n	80020b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e255      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08003cc0 	.word	0x08003cc0
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b0:	4bae      	ldr	r3, [pc, #696]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0e7      	beq.n	800208c <HAL_RCC_OscConfig+0x290>
 80020bc:	e014      	b.n	80020e8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff fb4d 	bl	800175c <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c6:	f7ff fb49 	bl	800175c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	; 0x64
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e238      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d8:	4ba4      	ldr	r3, [pc, #656]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2ca>
 80020e4:	e000      	b.n	80020e8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d060      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x30a>
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d119      	bne.n	8002134 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002106:	4b99      	ldr	r3, [pc, #612]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x322>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e215      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b93      	ldr	r3, [pc, #588]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	498f      	ldr	r1, [pc, #572]	; (800236c <HAL_RCC_OscConfig+0x570>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002132:	e040      	b.n	80021b6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d023      	beq.n	8002184 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b8b      	ldr	r3, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x570>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a8a      	ldr	r2, [pc, #552]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff fb08 	bl	800175c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff fb04 	bl	800175c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1f3      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	497b      	ldr	r1, [pc, #492]	; (800236c <HAL_RCC_OscConfig+0x570>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e018      	b.n	80021b6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002184:	4b79      	ldr	r3, [pc, #484]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a78      	ldr	r2, [pc, #480]	; (800236c <HAL_RCC_OscConfig+0x570>)
 800218a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff fae4 	bl	800175c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002198:	f7ff fae0 	bl	800175c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1cf      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021aa:	4b70      	ldr	r3, [pc, #448]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d03c      	beq.n	800223c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01c      	beq.n	8002204 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	4a66      	ldr	r2, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fabf 	bl	800175c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7ff fabb 	bl	800175c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1aa      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f4:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ef      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3e6>
 8002202:	e01b      	b.n	800223c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_RCC_OscConfig+0x570>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff faa2 	bl	800175c <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fa9e 	bl	800175c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e18d      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800222e:	4b4f      	ldr	r3, [pc, #316]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ef      	bne.n	800221c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a5 	beq.w	8002394 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_RCC_OscConfig+0x570>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a43      	ldr	r2, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x574>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_OscConfig+0x574>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <HAL_RCC_OscConfig+0x574>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff fa65 	bl	800175c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7ff fa61 	bl	800175c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e150      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_OscConfig+0x574>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d108      	bne.n	80022ce <HAL_RCC_OscConfig+0x4d2>
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022cc:	e024      	b.n	8002318 <HAL_RCC_OscConfig+0x51c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d110      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4fc>
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x51c>
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_RCC_OscConfig+0x570>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_RCC_OscConfig+0x570>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d016      	beq.n	800234e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7ff fa1c 	bl	800175c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7ff fa18 	bl	800175c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e105      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x570>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ed      	beq.n	8002328 <HAL_RCC_OscConfig+0x52c>
 800234c:	e019      	b.n	8002382 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7ff fa05 	bl	800175c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002354:	e00e      	b.n	8002374 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7ff fa01 	bl	800175c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d905      	bls.n	8002374 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0ee      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002374:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1e9      	bne.n	8002356 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	4a71      	ldr	r2, [pc, #452]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80d5 	beq.w	8002548 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b0c      	cmp	r3, #12
 80023a2:	f000 808e 	beq.w	80024c2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d15b      	bne.n	8002466 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b69      	ldr	r3, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a68      	ldr	r2, [pc, #416]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 80023b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7ff f9cf 	bl	800175c <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff f9cb 	bl	800175c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0ba      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e0:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_RCC_OscConfig+0x75c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023f0:	3a01      	subs	r2, #1
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	4311      	orrs	r1, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023fa:	0212      	lsls	r2, r2, #8
 80023fc:	4311      	orrs	r1, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002402:	0852      	lsrs	r2, r2, #1
 8002404:	3a01      	subs	r2, #1
 8002406:	0552      	lsls	r2, r2, #21
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800240e:	0852      	lsrs	r2, r2, #1
 8002410:	3a01      	subs	r2, #1
 8002412:	0652      	lsls	r2, r2, #25
 8002414:	4311      	orrs	r1, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800241a:	0912      	lsrs	r2, r2, #4
 800241c:	0452      	lsls	r2, r2, #17
 800241e:	430a      	orrs	r2, r1
 8002420:	494c      	ldr	r1, [pc, #304]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002422:	4313      	orrs	r3, r2
 8002424:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002426:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4a      	ldr	r2, [pc, #296]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 800242c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002430:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002432:	4b48      	ldr	r3, [pc, #288]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a47      	ldr	r2, [pc, #284]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f98d 	bl	800175c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f989 	bl	800175c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e078      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002458:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x64a>
 8002464:	e070      	b.n	8002548 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 800246c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002470:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800247e:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4a34      	ldr	r2, [pc, #208]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002484:	f023 0303 	bic.w	r3, r3, #3
 8002488:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800248a:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a31      	ldr	r2, [pc, #196]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 8002490:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f95f 	bl	800175c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a2:	f7ff f95b 	bl	800175c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e04a      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x6a6>
 80024c0:	e042      	b.n	8002548 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e03d      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x758>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0203 	and.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	429a      	cmp	r2, r3
 80024e0:	d130      	bne.n	8002544 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	3b01      	subs	r3, #1
 80024ee:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d127      	bne.n	8002544 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d11f      	bne.n	8002544 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800250e:	2a07      	cmp	r2, #7
 8002510:	bf14      	ite	ne
 8002512:	2201      	movne	r2, #1
 8002514:	2200      	moveq	r2, #0
 8002516:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002518:	4293      	cmp	r3, r2
 800251a:	d113      	bne.n	8002544 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d109      	bne.n	8002544 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	f99d808c 	.word	0xf99d808c

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0c8      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b63      	ldr	r3, [pc, #396]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4961      	ldr	r1, [pc, #388]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b0      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d04c      	beq.n	8002646 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b4:	4b56      	ldr	r3, [pc, #344]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d121      	bne.n	8002604 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e09e      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025cc:	4b50      	ldr	r3, [pc, #320]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d115      	bne.n	8002604 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e092      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e4:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e086      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e07e      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002604:	4b42      	ldr	r3, [pc, #264]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	493f      	ldr	r1, [pc, #252]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002616:	f7ff f8a1 	bl	800175c <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261c:	e00a      	b.n	8002634 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261e:	f7ff f89d 	bl	800175c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e066      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 020c 	and.w	r2, r3, #12
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	429a      	cmp	r2, r3
 8002644:	d1eb      	bne.n	800261e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002652:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	492c      	ldr	r1, [pc, #176]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d210      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4924      	ldr	r1, [pc, #144]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_RCC_ClockConfig+0x1b0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e036      	b.n	8002702 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4918      	ldr	r1, [pc, #96]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4910      	ldr	r1, [pc, #64]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d2:	f000 f825 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026d6:	4601      	mov	r1, r0
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	fa21 f303 	lsr.w	r3, r1, r3
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe ffe4 	bl	80016c4 <HAL_InitTick>
 80026fc:	4603      	mov	r3, r0
 80026fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002700:	7afb      	ldrb	r3, [r7, #11]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40022000 	.word	0x40022000
 8002710:	40021000 	.word	0x40021000
 8002714:	08003cc0 	.word	0x08003cc0
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002738:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x34>
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d121      	bne.n	8002792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d11e      	bne.n	8002792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002754:	4b33      	ldr	r3, [pc, #204]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d107      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e005      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002770:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800277c:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10d      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d102      	bne.n	800279e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_GetSysClockFreq+0x10c>)
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	e004      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_RCC_GetSysClockFreq+0x110>)
 80027a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	d133      	bne.n	8002816 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0xaa>
 80027c2:	e005      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027c6:	617b      	str	r3, [r7, #20]
      break;
 80027c8:	e005      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_GetSysClockFreq+0x110>)
 80027cc:	617b      	str	r3, [r7, #20]
      break;
 80027ce:	e002      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	617b      	str	r3, [r7, #20]
      break;
 80027d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	3301      	adds	r3, #1
 80027e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	fb02 f203 	mul.w	r2, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0e5b      	lsrs	r3, r3, #25
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	3301      	adds	r3, #1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002816:	69bb      	ldr	r3, [r7, #24]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3724      	adds	r7, #36	; 0x24
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000
 8002828:	08003cd8 	.word	0x08003cd8
 800282c:	00f42400 	.word	0x00f42400
 8002830:	007a1200 	.word	0x007a1200

08002834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_RCC_GetHCLKFreq+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002850:	f7ff fff0 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002854:	4601      	mov	r1, r0
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	08003cd0 	.word	0x08003cd0

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800287c:	f7ff ffda 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002880:	4601      	mov	r1, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0adb      	lsrs	r3, r3, #11
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	08003cd0 	.word	0x08003cd0

080028a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028bc:	f7ff fa3a 	bl	8001d34 <HAL_PWREx_GetVoltageRange>
 80028c0:	6178      	str	r0, [r7, #20]
 80028c2:	e014      	b.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	4a24      	ldr	r2, [pc, #144]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6593      	str	r3, [r2, #88]	; 0x58
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028dc:	f7ff fa2a 	bl	8001d34 <HAL_PWREx_GetVoltageRange>
 80028e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f4:	d10b      	bne.n	800290e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d919      	bls.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002900:	d902      	bls.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002902:	2302      	movs	r3, #2
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	e013      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002908:	2301      	movs	r3, #1
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e010      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d902      	bls.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002914:	2303      	movs	r3, #3
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e00a      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d102      	bne.n	8002926 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002920:	2302      	movs	r3, #2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	e004      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b70      	cmp	r3, #112	; 0x70
 800292a:	d101      	bne.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 0207 	bic.w	r2, r3, #7
 8002938:	4909      	ldr	r1, [pc, #36]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	429a      	cmp	r2, r3
 800294c:	d001      	beq.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	40022000 	.word	0x40022000

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800296c:	2300      	movs	r3, #0
 800296e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002970:	2300      	movs	r3, #0
 8002972:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297c:	2b00      	cmp	r3, #0
 800297e:	d03f      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002988:	d01c      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800298a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298e:	d802      	bhi.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00e      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002994:	e01f      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800299a:	d003      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800299c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029a0:	d01c      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80029a2:	e018      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a4:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a84      	ldr	r2, [pc, #528]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b0:	e015      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fab9 	bl	8002f30 <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c2:	e00c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3320      	adds	r3, #32
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fba0 	bl	8003110 <RCCEx_PLLSAI2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	74fb      	strb	r3, [r7, #19]
      break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e4:	4b75      	ldr	r3, [pc, #468]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f2:	4972      	ldr	r1, [pc, #456]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029fa:	e001      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d03f      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d01c      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1a:	d802      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a20:	e01f      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a26:	d003      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a2c:	d01c      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a2e:	e018      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a61      	ldr	r2, [pc, #388]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a3c:	e015      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fa73 	bl	8002f30 <RCCEx_PLLSAI1_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a4e:	e00c      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3320      	adds	r3, #32
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fb5a 	bl	8003110 <RCCEx_PLLSAI2_Config>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a60:	e003      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	74fb      	strb	r3, [r7, #19]
      break;
 8002a66:	e000      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a70:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7e:	494f      	ldr	r1, [pc, #316]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a86:	e001      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a0 	beq.w	8002bda <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac0:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad0:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ada:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fe3e 	bl	800175c <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae2:	e009      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae4:	f7fe fe3a 	bl	800175c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d902      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	74fb      	strb	r3, [r7, #19]
        break;
 8002af6:	e005      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ef      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d15c      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01f      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d019      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe fdf9 	bl	800175c <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fdf5 	bl	800175c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d902      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	74fb      	strb	r3, [r7, #19]
            break;
 8002b84:	e006      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ec      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002baa:	4904      	ldr	r1, [pc, #16]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bb2:	e009      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc8:	7c7b      	ldrb	r3, [r7, #17]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4b9e      	ldr	r3, [pc, #632]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	4a9d      	ldr	r2, [pc, #628]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be6:	4b98      	ldr	r3, [pc, #608]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f023 0203 	bic.w	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	4994      	ldr	r1, [pc, #592]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c08:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f023 020c 	bic.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	498c      	ldr	r1, [pc, #560]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c2a:	4b87      	ldr	r3, [pc, #540]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	4983      	ldr	r1, [pc, #524]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c4c:	4b7e      	ldr	r3, [pc, #504]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	497b      	ldr	r1, [pc, #492]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c6e:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7c:	4972      	ldr	r1, [pc, #456]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c90:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	496a      	ldr	r1, [pc, #424]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb2:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	4961      	ldr	r1, [pc, #388]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cd4:	4b5c      	ldr	r3, [pc, #368]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	4959      	ldr	r1, [pc, #356]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d04:	4950      	ldr	r1, [pc, #320]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	4948      	ldr	r1, [pc, #288]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d3a:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	493f      	ldr	r1, [pc, #252]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d028      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d5c:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6a:	4937      	ldr	r1, [pc, #220]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d7c:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d86:	60d3      	str	r3, [r2, #12]
 8002d88:	e011      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d92:	d10c      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f8c8 	bl	8002f30 <RCCEx_PLLSAI1_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d028      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dba:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	491f      	ldr	r1, [pc, #124]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de4:	60d3      	str	r3, [r2, #12]
 8002de6:	e011      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2101      	movs	r1, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f899 	bl	8002f30 <RCCEx_PLLSAI1_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d02b      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	4908      	ldr	r1, [pc, #32]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e36:	d109      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a02      	ldr	r2, [pc, #8]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e42:	60d3      	str	r3, [r2, #12]
 8002e44:	e014      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 f867 	bl	8002f30 <RCCEx_PLLSAI1_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d02f      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8a:	4928      	ldr	r1, [pc, #160]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f844 	bl	8002f30 <RCCEx_PLLSAI1_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d014      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	74bb      	strb	r3, [r7, #18]
 8002eb6:	e011      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3320      	adds	r3, #32
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f921 	bl	8003110 <RCCEx_PLLSAI2_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef6:	490d      	ldr	r1, [pc, #52]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1a:	4904      	ldr	r1, [pc, #16]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f22:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000

08002f30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f3e:	4b73      	ldr	r3, [pc, #460]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f4a:	4b70      	ldr	r3, [pc, #448]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10d      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f62:	4b6a      	ldr	r3, [pc, #424]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
       ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d044      	beq.n	8003000 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	e041      	b.n	8003000 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d00c      	beq.n	8002f9e <RCCEx_PLLSAI1_Config+0x6e>
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d013      	beq.n	8002fb0 <RCCEx_PLLSAI1_Config+0x80>
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d120      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f8c:	4b5f      	ldr	r3, [pc, #380]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11d      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9c:	e01a      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fae:	e013      	b.n	8002fd8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fb0:	4b56      	ldr	r3, [pc, #344]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fcc:	e006      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd2:	e004      	b.n	8002fde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fd4:	bf00      	nop
 8002fd6:	e002      	b.n	8002fde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fd8:	bf00      	nop
 8002fda:	e000      	b.n	8002fde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fdc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fe4:	4b49      	ldr	r3, [pc, #292]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	4944      	ldr	r1, [pc, #272]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d17d      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a40      	ldr	r2, [pc, #256]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 800300c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003012:	f7fe fba3 	bl	800175c <HAL_GetTick>
 8003016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003018:	e009      	b.n	800302e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800301a:	f7fe fb9f 	bl	800175c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d902      	bls.n	800302e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	73fb      	strb	r3, [r7, #15]
        break;
 800302c:	e005      	b.n	800303a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ef      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d160      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d111      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6892      	ldr	r2, [r2, #8]
 8003056:	0211      	lsls	r1, r2, #8
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68d2      	ldr	r2, [r2, #12]
 800305c:	0912      	lsrs	r2, r2, #4
 800305e:	0452      	lsls	r2, r2, #17
 8003060:	430a      	orrs	r2, r1
 8003062:	492a      	ldr	r1, [pc, #168]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	610b      	str	r3, [r1, #16]
 8003068:	e027      	b.n	80030ba <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d112      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	0211      	lsls	r1, r2, #8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6912      	ldr	r2, [r2, #16]
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	3a01      	subs	r2, #1
 800308a:	0552      	lsls	r2, r2, #21
 800308c:	430a      	orrs	r2, r1
 800308e:	491f      	ldr	r1, [pc, #124]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	610b      	str	r3, [r1, #16]
 8003094:	e011      	b.n	80030ba <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800309e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6892      	ldr	r2, [r2, #8]
 80030a6:	0211      	lsls	r1, r2, #8
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6952      	ldr	r2, [r2, #20]
 80030ac:	0852      	lsrs	r2, r2, #1
 80030ae:	3a01      	subs	r2, #1
 80030b0:	0652      	lsls	r2, r2, #25
 80030b2:	430a      	orrs	r2, r1
 80030b4:	4915      	ldr	r1, [pc, #84]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030ba:	4b14      	ldr	r3, [pc, #80]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a13      	ldr	r2, [pc, #76]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe fb49 	bl	800175c <HAL_GetTick>
 80030ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030cc:	e009      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ce:	f7fe fb45 	bl	800175c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	73fb      	strb	r3, [r7, #15]
          break;
 80030e0:	e005      	b.n	80030ee <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0ef      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000

08003110 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800311e:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d018      	beq.n	800315c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0203 	and.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d10d      	bne.n	8003156 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
       ||
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003142:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
       ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d044      	beq.n	80031e0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	e041      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d00c      	beq.n	800317e <RCCEx_PLLSAI2_Config+0x6e>
 8003164:	2b03      	cmp	r3, #3
 8003166:	d013      	beq.n	8003190 <RCCEx_PLLSAI2_Config+0x80>
 8003168:	2b01      	cmp	r3, #1
 800316a:	d120      	bne.n	80031ae <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800316c:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d11d      	bne.n	80031b4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317c:	e01a      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800317e:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318e:	e013      	b.n	80031b8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10f      	bne.n	80031bc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800319c:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ac:	e006      	b.n	80031bc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
      break;
 80031b2:	e004      	b.n	80031be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031b4:	bf00      	nop
 80031b6:	e002      	b.n	80031be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031c4:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	430b      	orrs	r3, r1
 80031da:	4939      	ldr	r1, [pc, #228]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d167      	bne.n	80032b6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f2:	f7fe fab3 	bl	800175c <HAL_GetTick>
 80031f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031f8:	e009      	b.n	800320e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031fa:	f7fe faaf 	bl	800175c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d902      	bls.n	800320e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	73fb      	strb	r3, [r7, #15]
        break;
 800320c:	e005      	b.n	800321a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800320e:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ef      	bne.n	80031fa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d14a      	bne.n	80032b6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d111      	bne.n	800324a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800322e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6892      	ldr	r2, [r2, #8]
 8003236:	0211      	lsls	r1, r2, #8
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68d2      	ldr	r2, [r2, #12]
 800323c:	0912      	lsrs	r2, r2, #4
 800323e:	0452      	lsls	r2, r2, #17
 8003240:	430a      	orrs	r2, r1
 8003242:	491f      	ldr	r1, [pc, #124]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	614b      	str	r3, [r1, #20]
 8003248:	e011      	b.n	800326e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003252:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	0211      	lsls	r1, r2, #8
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6912      	ldr	r2, [r2, #16]
 8003260:	0852      	lsrs	r2, r2, #1
 8003262:	3a01      	subs	r2, #1
 8003264:	0652      	lsls	r2, r2, #25
 8003266:	430a      	orrs	r2, r1
 8003268:	4915      	ldr	r1, [pc, #84]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fe fa6f 	bl	800175c <HAL_GetTick>
 800327e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003280:	e009      	b.n	8003296 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003282:	f7fe fa6b 	bl	800175c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d902      	bls.n	8003296 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	73fb      	strb	r3, [r7, #15]
          break;
 8003294:	e005      	b.n	80032a2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ef      	beq.n	8003282 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e040      	b.n	8003358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe f960 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f82c 	bl	8003360 <UART_SetConfig>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e022      	b.n	8003358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fb68 	bl	80039f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800332e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fbef 	bl	8003b34 <UART_CheckIdleState>
 8003356:	4603      	mov	r3, r0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003360:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003364:	b088      	sub	sp, #32
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4313      	orrs	r3, r2
 800338c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4bac      	ldr	r3, [pc, #688]	; (8003648 <UART_SetConfig+0x2e8>)
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	69f9      	ldr	r1, [r7, #28]
 800339e:	430b      	orrs	r3, r1
 80033a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4aa2      	ldr	r2, [pc, #648]	; (800364c <UART_SetConfig+0x2ec>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a99      	ldr	r2, [pc, #612]	; (8003650 <UART_SetConfig+0x2f0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d121      	bne.n	8003434 <UART_SetConfig+0xd4>
 80033f0:	4b98      	ldr	r3, [pc, #608]	; (8003654 <UART_SetConfig+0x2f4>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d816      	bhi.n	800342c <UART_SetConfig+0xcc>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <UART_SetConfig+0xa4>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003415 	.word	0x08003415
 8003408:	08003421 	.word	0x08003421
 800340c:	0800341b 	.word	0x0800341b
 8003410:	08003427 	.word	0x08003427
 8003414:	2301      	movs	r3, #1
 8003416:	76fb      	strb	r3, [r7, #27]
 8003418:	e0e8      	b.n	80035ec <UART_SetConfig+0x28c>
 800341a:	2302      	movs	r3, #2
 800341c:	76fb      	strb	r3, [r7, #27]
 800341e:	e0e5      	b.n	80035ec <UART_SetConfig+0x28c>
 8003420:	2304      	movs	r3, #4
 8003422:	76fb      	strb	r3, [r7, #27]
 8003424:	e0e2      	b.n	80035ec <UART_SetConfig+0x28c>
 8003426:	2308      	movs	r3, #8
 8003428:	76fb      	strb	r3, [r7, #27]
 800342a:	e0df      	b.n	80035ec <UART_SetConfig+0x28c>
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
 8003430:	bf00      	nop
 8003432:	e0db      	b.n	80035ec <UART_SetConfig+0x28c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a87      	ldr	r2, [pc, #540]	; (8003658 <UART_SetConfig+0x2f8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d134      	bne.n	80034a8 <UART_SetConfig+0x148>
 800343e:	4b85      	ldr	r3, [pc, #532]	; (8003654 <UART_SetConfig+0x2f4>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d829      	bhi.n	80034a0 <UART_SetConfig+0x140>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <UART_SetConfig+0xf4>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003489 	.word	0x08003489
 8003458:	080034a1 	.word	0x080034a1
 800345c:	080034a1 	.word	0x080034a1
 8003460:	080034a1 	.word	0x080034a1
 8003464:	08003495 	.word	0x08003495
 8003468:	080034a1 	.word	0x080034a1
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034a1 	.word	0x080034a1
 8003474:	0800348f 	.word	0x0800348f
 8003478:	080034a1 	.word	0x080034a1
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080034a1 	.word	0x080034a1
 8003484:	0800349b 	.word	0x0800349b
 8003488:	2300      	movs	r3, #0
 800348a:	76fb      	strb	r3, [r7, #27]
 800348c:	e0ae      	b.n	80035ec <UART_SetConfig+0x28c>
 800348e:	2302      	movs	r3, #2
 8003490:	76fb      	strb	r3, [r7, #27]
 8003492:	e0ab      	b.n	80035ec <UART_SetConfig+0x28c>
 8003494:	2304      	movs	r3, #4
 8003496:	76fb      	strb	r3, [r7, #27]
 8003498:	e0a8      	b.n	80035ec <UART_SetConfig+0x28c>
 800349a:	2308      	movs	r3, #8
 800349c:	76fb      	strb	r3, [r7, #27]
 800349e:	e0a5      	b.n	80035ec <UART_SetConfig+0x28c>
 80034a0:	2310      	movs	r3, #16
 80034a2:	76fb      	strb	r3, [r7, #27]
 80034a4:	bf00      	nop
 80034a6:	e0a1      	b.n	80035ec <UART_SetConfig+0x28c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6b      	ldr	r2, [pc, #428]	; (800365c <UART_SetConfig+0x2fc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d120      	bne.n	80034f4 <UART_SetConfig+0x194>
 80034b2:	4b68      	ldr	r3, [pc, #416]	; (8003654 <UART_SetConfig+0x2f4>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d00f      	beq.n	80034e0 <UART_SetConfig+0x180>
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d802      	bhi.n	80034ca <UART_SetConfig+0x16a>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <UART_SetConfig+0x174>
 80034c8:	e010      	b.n	80034ec <UART_SetConfig+0x18c>
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d005      	beq.n	80034da <UART_SetConfig+0x17a>
 80034ce:	2b30      	cmp	r3, #48	; 0x30
 80034d0:	d009      	beq.n	80034e6 <UART_SetConfig+0x186>
 80034d2:	e00b      	b.n	80034ec <UART_SetConfig+0x18c>
 80034d4:	2300      	movs	r3, #0
 80034d6:	76fb      	strb	r3, [r7, #27]
 80034d8:	e088      	b.n	80035ec <UART_SetConfig+0x28c>
 80034da:	2302      	movs	r3, #2
 80034dc:	76fb      	strb	r3, [r7, #27]
 80034de:	e085      	b.n	80035ec <UART_SetConfig+0x28c>
 80034e0:	2304      	movs	r3, #4
 80034e2:	76fb      	strb	r3, [r7, #27]
 80034e4:	e082      	b.n	80035ec <UART_SetConfig+0x28c>
 80034e6:	2308      	movs	r3, #8
 80034e8:	76fb      	strb	r3, [r7, #27]
 80034ea:	e07f      	b.n	80035ec <UART_SetConfig+0x28c>
 80034ec:	2310      	movs	r3, #16
 80034ee:	76fb      	strb	r3, [r7, #27]
 80034f0:	bf00      	nop
 80034f2:	e07b      	b.n	80035ec <UART_SetConfig+0x28c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a59      	ldr	r2, [pc, #356]	; (8003660 <UART_SetConfig+0x300>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d120      	bne.n	8003540 <UART_SetConfig+0x1e0>
 80034fe:	4b55      	ldr	r3, [pc, #340]	; (8003654 <UART_SetConfig+0x2f4>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d00f      	beq.n	800352c <UART_SetConfig+0x1cc>
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d802      	bhi.n	8003516 <UART_SetConfig+0x1b6>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <UART_SetConfig+0x1c0>
 8003514:	e010      	b.n	8003538 <UART_SetConfig+0x1d8>
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	d005      	beq.n	8003526 <UART_SetConfig+0x1c6>
 800351a:	2bc0      	cmp	r3, #192	; 0xc0
 800351c:	d009      	beq.n	8003532 <UART_SetConfig+0x1d2>
 800351e:	e00b      	b.n	8003538 <UART_SetConfig+0x1d8>
 8003520:	2300      	movs	r3, #0
 8003522:	76fb      	strb	r3, [r7, #27]
 8003524:	e062      	b.n	80035ec <UART_SetConfig+0x28c>
 8003526:	2302      	movs	r3, #2
 8003528:	76fb      	strb	r3, [r7, #27]
 800352a:	e05f      	b.n	80035ec <UART_SetConfig+0x28c>
 800352c:	2304      	movs	r3, #4
 800352e:	76fb      	strb	r3, [r7, #27]
 8003530:	e05c      	b.n	80035ec <UART_SetConfig+0x28c>
 8003532:	2308      	movs	r3, #8
 8003534:	76fb      	strb	r3, [r7, #27]
 8003536:	e059      	b.n	80035ec <UART_SetConfig+0x28c>
 8003538:	2310      	movs	r3, #16
 800353a:	76fb      	strb	r3, [r7, #27]
 800353c:	bf00      	nop
 800353e:	e055      	b.n	80035ec <UART_SetConfig+0x28c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a47      	ldr	r2, [pc, #284]	; (8003664 <UART_SetConfig+0x304>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d124      	bne.n	8003594 <UART_SetConfig+0x234>
 800354a:	4b42      	ldr	r3, [pc, #264]	; (8003654 <UART_SetConfig+0x2f4>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d012      	beq.n	8003580 <UART_SetConfig+0x220>
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d802      	bhi.n	8003566 <UART_SetConfig+0x206>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <UART_SetConfig+0x214>
 8003564:	e012      	b.n	800358c <UART_SetConfig+0x22c>
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d006      	beq.n	800357a <UART_SetConfig+0x21a>
 800356c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003570:	d009      	beq.n	8003586 <UART_SetConfig+0x226>
 8003572:	e00b      	b.n	800358c <UART_SetConfig+0x22c>
 8003574:	2300      	movs	r3, #0
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	e038      	b.n	80035ec <UART_SetConfig+0x28c>
 800357a:	2302      	movs	r3, #2
 800357c:	76fb      	strb	r3, [r7, #27]
 800357e:	e035      	b.n	80035ec <UART_SetConfig+0x28c>
 8003580:	2304      	movs	r3, #4
 8003582:	76fb      	strb	r3, [r7, #27]
 8003584:	e032      	b.n	80035ec <UART_SetConfig+0x28c>
 8003586:	2308      	movs	r3, #8
 8003588:	76fb      	strb	r3, [r7, #27]
 800358a:	e02f      	b.n	80035ec <UART_SetConfig+0x28c>
 800358c:	2310      	movs	r3, #16
 800358e:	76fb      	strb	r3, [r7, #27]
 8003590:	bf00      	nop
 8003592:	e02b      	b.n	80035ec <UART_SetConfig+0x28c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <UART_SetConfig+0x2ec>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d124      	bne.n	80035e8 <UART_SetConfig+0x288>
 800359e:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <UART_SetConfig+0x2f4>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ac:	d012      	beq.n	80035d4 <UART_SetConfig+0x274>
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d802      	bhi.n	80035ba <UART_SetConfig+0x25a>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <UART_SetConfig+0x268>
 80035b8:	e012      	b.n	80035e0 <UART_SetConfig+0x280>
 80035ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035be:	d006      	beq.n	80035ce <UART_SetConfig+0x26e>
 80035c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c4:	d009      	beq.n	80035da <UART_SetConfig+0x27a>
 80035c6:	e00b      	b.n	80035e0 <UART_SetConfig+0x280>
 80035c8:	2300      	movs	r3, #0
 80035ca:	76fb      	strb	r3, [r7, #27]
 80035cc:	e00e      	b.n	80035ec <UART_SetConfig+0x28c>
 80035ce:	2302      	movs	r3, #2
 80035d0:	76fb      	strb	r3, [r7, #27]
 80035d2:	e00b      	b.n	80035ec <UART_SetConfig+0x28c>
 80035d4:	2304      	movs	r3, #4
 80035d6:	76fb      	strb	r3, [r7, #27]
 80035d8:	e008      	b.n	80035ec <UART_SetConfig+0x28c>
 80035da:	2308      	movs	r3, #8
 80035dc:	76fb      	strb	r3, [r7, #27]
 80035de:	e005      	b.n	80035ec <UART_SetConfig+0x28c>
 80035e0:	2310      	movs	r3, #16
 80035e2:	76fb      	strb	r3, [r7, #27]
 80035e4:	bf00      	nop
 80035e6:	e001      	b.n	80035ec <UART_SetConfig+0x28c>
 80035e8:	2310      	movs	r3, #16
 80035ea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a16      	ldr	r2, [pc, #88]	; (800364c <UART_SetConfig+0x2ec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 80fa 	bne.w	80037ec <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035f8:	7efb      	ldrb	r3, [r7, #27]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d836      	bhi.n	800366c <UART_SetConfig+0x30c>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0x2a4>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003629 	.word	0x08003629
 8003608:	0800366d 	.word	0x0800366d
 800360c:	08003631 	.word	0x08003631
 8003610:	0800366d 	.word	0x0800366d
 8003614:	08003637 	.word	0x08003637
 8003618:	0800366d 	.word	0x0800366d
 800361c:	0800366d 	.word	0x0800366d
 8003620:	0800366d 	.word	0x0800366d
 8003624:	0800363f 	.word	0x0800363f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003628:	f7ff f910 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 800362c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800362e:	e020      	b.n	8003672 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <UART_SetConfig+0x308>)
 8003632:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003634:	e01d      	b.n	8003672 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003636:	f7ff f873 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 800363a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800363c:	e019      	b.n	8003672 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003644:	e015      	b.n	8003672 <UART_SetConfig+0x312>
 8003646:	bf00      	nop
 8003648:	efff69f3 	.word	0xefff69f3
 800364c:	40008000 	.word	0x40008000
 8003650:	40013800 	.word	0x40013800
 8003654:	40021000 	.word	0x40021000
 8003658:	40004400 	.word	0x40004400
 800365c:	40004800 	.word	0x40004800
 8003660:	40004c00 	.word	0x40004c00
 8003664:	40005000 	.word	0x40005000
 8003668:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	74fb      	strb	r3, [r7, #19]
        break;
 8003670:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 81ac 	beq.w	80039d2 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	429a      	cmp	r2, r3
 8003688:	d305      	bcc.n	8003696 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	429a      	cmp	r2, r3
 8003694:	d902      	bls.n	800369c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	74fb      	strb	r3, [r7, #19]
 800369a:	e19a      	b.n	80039d2 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800369c:	7efb      	ldrb	r3, [r7, #27]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	f200 8091 	bhi.w	80037c6 <UART_SetConfig+0x466>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0x34c>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036d1 	.word	0x080036d1
 80036b0:	080037c7 	.word	0x080037c7
 80036b4:	0800371d 	.word	0x0800371d
 80036b8:	080037c7 	.word	0x080037c7
 80036bc:	08003751 	.word	0x08003751
 80036c0:	080037c7 	.word	0x080037c7
 80036c4:	080037c7 	.word	0x080037c7
 80036c8:	080037c7 	.word	0x080037c7
 80036cc:	0800379d 	.word	0x0800379d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036d0:	f7ff f8bc 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4619      	mov	r1, r3
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f04f 0400 	mov.w	r4, #0
 80036e4:	0214      	lsls	r4, r2, #8
 80036e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036ea:	020b      	lsls	r3, r1, #8
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	4611      	mov	r1, r2
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	eb13 0b01 	adds.w	fp, r3, r1
 80036fc:	eb44 0c02 	adc.w	ip, r4, r2
 8003700:	4658      	mov	r0, fp
 8003702:	4661      	mov	r1, ip
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	461a      	mov	r2, r3
 800370e:	4623      	mov	r3, r4
 8003710:	f7fc fd5a 	bl	80001c8 <__aeabi_uldivmod>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800371a:	e057      	b.n	80037cc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	49b1      	ldr	r1, [pc, #708]	; (80039ec <UART_SetConfig+0x68c>)
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	eb13 0b01 	adds.w	fp, r3, r1
 8003730:	eb44 0c02 	adc.w	ip, r4, r2
 8003734:	4658      	mov	r0, fp
 8003736:	4661      	mov	r1, ip
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	461a      	mov	r2, r3
 8003742:	4623      	mov	r3, r4
 8003744:	f7fc fd40 	bl	80001c8 <__aeabi_uldivmod>
 8003748:	4603      	mov	r3, r0
 800374a:	460c      	mov	r4, r1
 800374c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800374e:	e03d      	b.n	80037cc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003750:	f7fe ffe6 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8003754:	4603      	mov	r3, r0
 8003756:	4619      	mov	r1, r3
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	0214      	lsls	r4, r2, #8
 8003766:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800376a:	020b      	lsls	r3, r1, #8
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6852      	ldr	r2, [r2, #4]
 8003770:	0852      	lsrs	r2, r2, #1
 8003772:	4611      	mov	r1, r2
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	eb13 0b01 	adds.w	fp, r3, r1
 800377c:	eb44 0c02 	adc.w	ip, r4, r2
 8003780:	4658      	mov	r0, fp
 8003782:	4661      	mov	r1, ip
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f04f 0400 	mov.w	r4, #0
 800378c:	461a      	mov	r2, r3
 800378e:	4623      	mov	r3, r4
 8003790:	f7fc fd1a 	bl	80001c8 <__aeabi_uldivmod>
 8003794:	4603      	mov	r3, r0
 8003796:	460c      	mov	r4, r1
 8003798:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800379a:	e017      	b.n	80037cc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	f04f 0400 	mov.w	r4, #0
 80037a6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80037aa:	f144 0100 	adc.w	r1, r4, #0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f04f 0400 	mov.w	r4, #0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4623      	mov	r3, r4
 80037ba:	f7fc fd05 	bl	80001c8 <__aeabi_uldivmod>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80037c4:	e002      	b.n	80037cc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	74fb      	strb	r3, [r7, #19]
            break;
 80037ca:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d2:	d308      	bcc.n	80037e6 <UART_SetConfig+0x486>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037da:	d204      	bcs.n	80037e6 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e0f5      	b.n	80039d2 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	74fb      	strb	r3, [r7, #19]
 80037ea:	e0f2      	b.n	80039d2 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f4:	d17f      	bne.n	80038f6 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80037f6:	7efb      	ldrb	r3, [r7, #27]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d85c      	bhi.n	80038b6 <UART_SetConfig+0x556>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0x4a4>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003829 	.word	0x08003829
 8003808:	08003847 	.word	0x08003847
 800380c:	08003865 	.word	0x08003865
 8003810:	080038b7 	.word	0x080038b7
 8003814:	08003881 	.word	0x08003881
 8003818:	080038b7 	.word	0x080038b7
 800381c:	080038b7 	.word	0x080038b7
 8003820:	080038b7 	.word	0x080038b7
 8003824:	0800389f 	.word	0x0800389f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003828:	f7ff f810 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 800382c:	4603      	mov	r3, r0
 800382e:	005a      	lsls	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003844:	e03a      	b.n	80038bc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003846:	f7ff f817 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 800384a:	4603      	mov	r3, r0
 800384c:	005a      	lsls	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	441a      	add	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	b29b      	uxth	r3, r3
 8003860:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003862:	e02b      	b.n	80038bc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800386e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	fbb3 f3f2 	udiv	r3, r3, r2
 800387a:	b29b      	uxth	r3, r3
 800387c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800387e:	e01d      	b.n	80038bc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003880:	f7fe ff4e 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8003884:	4603      	mov	r3, r0
 8003886:	005a      	lsls	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	441a      	add	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	b29b      	uxth	r3, r3
 800389a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800389c:	e00e      	b.n	80038bc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038b4:	e002      	b.n	80038bc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	74fb      	strb	r3, [r7, #19]
        break;
 80038ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b0f      	cmp	r3, #15
 80038c0:	d916      	bls.n	80038f0 <UART_SetConfig+0x590>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d212      	bcs.n	80038f0 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f023 030f 	bic.w	r3, r3, #15
 80038d2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	b29a      	uxth	r2, r3
 80038e0:	897b      	ldrh	r3, [r7, #10]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	897a      	ldrh	r2, [r7, #10]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	e070      	b.n	80039d2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	74fb      	strb	r3, [r7, #19]
 80038f4:	e06d      	b.n	80039d2 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80038f6:	7efb      	ldrb	r3, [r7, #27]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d859      	bhi.n	80039b0 <UART_SetConfig+0x650>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <UART_SetConfig+0x5a4>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003929 	.word	0x08003929
 8003908:	08003945 	.word	0x08003945
 800390c:	08003961 	.word	0x08003961
 8003910:	080039b1 	.word	0x080039b1
 8003914:	0800397d 	.word	0x0800397d
 8003918:	080039b1 	.word	0x080039b1
 800391c:	080039b1 	.word	0x080039b1
 8003920:	080039b1 	.word	0x080039b1
 8003924:	08003999 	.word	0x08003999
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003928:	f7fe ff90 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 800392c:	4602      	mov	r2, r0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003942:	e038      	b.n	80039b6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003944:	f7fe ff98 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	b29b      	uxth	r3, r3
 800395c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800395e:	e02a      	b.n	80039b6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800396a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6852      	ldr	r2, [r2, #4]
 8003972:	fbb3 f3f2 	udiv	r3, r3, r2
 8003976:	b29b      	uxth	r3, r3
 8003978:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800397a:	e01c      	b.n	80039b6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800397c:	f7fe fed0 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003996:	e00e      	b.n	80039b6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039ae:	e002      	b.n	80039b6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	74fb      	strb	r3, [r7, #19]
        break;
 80039b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d908      	bls.n	80039ce <UART_SetConfig+0x66e>
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d204      	bcs.n	80039ce <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	e001      	b.n	80039d2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80039de:	7cfb      	ldrb	r3, [r7, #19]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80039ea:	bf00      	nop
 80039ec:	f4240000 	.word	0xf4240000

080039f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aee:	d10a      	bne.n	8003b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b42:	f7fd fe0b 	bl	800175c <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d10e      	bne.n	8003b74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f82a 	bl	8003bbe <UART_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e020      	b.n	8003bb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d10e      	bne.n	8003ba0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f814 	bl	8003bbe <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e00a      	b.n	8003bb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bce:	e02a      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d026      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7fd fdc0 	bl	800175c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <UART_WaitOnFlagUntilTimeout+0x30>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11b      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bfc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e00f      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d0c5      	beq.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4e0d      	ldr	r6, [pc, #52]	; (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	; (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1ba4      	subs	r4, r4, r6
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2500      	movs	r5, #0
 8003c5c:	42a5      	cmp	r5, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4e0b      	ldr	r6, [pc, #44]	; (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 f820 	bl	8003ca8 <_init>
 8003c68:	1ba4      	subs	r4, r4, r6
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2500      	movs	r5, #0
 8003c6e:	42a5      	cmp	r5, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c78:	4798      	blx	r3
 8003c7a:	3501      	adds	r5, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c82:	4798      	blx	r3
 8003c84:	3501      	adds	r5, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	08003d10 	.word	0x08003d10
 8003c8c:	08003d10 	.word	0x08003d10
 8003c90:	08003d10 	.word	0x08003d10
 8003c94:	08003d14 	.word	0x08003d14

08003c98 <memset>:
 8003c98:	4402      	add	r2, r0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <_init>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_fini>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr
